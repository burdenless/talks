Simple Plugin Architectures in Go

July 2017
Tags: golang, gophercon2017, plugins

Bob Argenbright
Security Engineer, Heroku
bob@heroku.com
@byt3smith

* Why Plugins
- Extensibility
- Simplicity
- Reliability
- Approachability

* Plugin Requirements
1. Load/Unload
2. Run/Stop
3. Handle errors

* Complexity

* Single Process
.image img/single-process.png

* Multi Process
.image img/multi.png

* Architectures

* pkg/plugin
- Single process
- Compiled
- Introduced in go1.8

Compile as plugin

  go build -buildmode=plugin

*NOTE:* Currently pkg/plugin only works on Linux.

* pkg/plugin: Example

Sample Plugin
.code hello.go

Open the compiled plugin

  p, _ := plugin.Open("./plugin.so")

Uses a Lookup() to retrieve symbols

  hello, _ := p.Lookup("Hello")

* RPC
- Multi process
- Requires client / listener
- Local or remote
- Language agnostic

* RPC: Examples
- [[https://github.com/hashicorp/go-plugin/tree/master/examples/basic][Go-plugin]]
- [[https://github.com/natefinch/pie/tree/master/examples][Pie]]

* Traditional
- Single process
- Simple
- Follows the design of stdlib packages

* Traditional: Example

_Any_object_that_implements_Handler_can_serve_HTTP_requests._

.code traditional.go /START OMIT/,/END OMIT/


* Goroutines
- Single process
- Reliable
- Communicate using channels

*DISCLAIMER*: This architecture is not the best use of goroutines

* Goroutines: Example
.code goroutines.go /START OMIT/,/END OMIT/

* Goroutines: Example (continued)
.play goroutines.go /START FOMIT/,/END FOMIT/

* Other Options
- Embedded scripts
- Config files

* How We Do It

* The Traditionalist
- Create the plugin contract (interface)

  type Plugin interface {
    Run(string) error
    Register()
  }

* The Traditionalist (continued)
.play interfaces.go /START OMIT/,/END OMIT/

* The Traditionalist (continued)
*Pros*

- Approachable
- Follows stdlib

*Cons*

- Restrictive

* Recommendations
_Take_them_with_a_grain_of_salt_

✅ Pkg/plugin
✅ RPC
✅ Traditional
⚠️ Goroutines
❌ Embedded scripts
❌ Config files

* References
- [[https://golang.org/pkg/plugin/]]
- Pie toolkit for creating Go plugins [[https://github.com/natefinch/pie]]
- HashiCorp go-plugin talk: [[https://www.youtube.com/watch?v=SRvm3zQQc1Q]]
- AppliedGo - Plugins in Go: [[https://appliedgo.net/plugins/]]
- micro: microservice toolkit [[https://github.com/micro/micro/tree/master/plugin]]
